{
  "posts": [
    {
      "id": "298f8120-dc4f-40c6-9dd1-a829316376ce",
      "title": "Review del teclado Redragon Kumara K552: ¿el mejor para programadores?",
      "slug": "redragon-kumara-k552-review",
      "tags": ["Reviews"],
      "createdAt": "2023-03-11T23:03:10.064Z",
      "cover": {
        "id": 43451,
        "src": "https://a-us.storyblok.com/f/1005258/1234x526/9d7b830c91/cover.png",
        "alt": "Redragon Kumara K552 en blanco y negro",
        "width": 1234,
        "height": 526
      },
      "ogImage": {
        "id": 43452,
        "src": "https://a-us.storyblok.com/f/1005258/1200x630/eb3c2a7c1f/og-image.jpg",
        "alt": "Redragon Kumara K552, ¿el mejor teclado para programadores?",
        "width": 1200,
        "height": 630
      },
      "teaser": "Programar puede ser aún más placentero si utilizas un teclado mecánico, y en este artículo te traigo la mejor opción calidad-precio que conozco de primera mano.",
      "content": "Si hay algo que no podemos cuestionar como programadores, es que nuestro periférico más importante y favorito es el teclado. Con él escribimos el código que paga nuestras cuentas a final de mes, por lo que es preciso saber cuál elegir al momento de adquirir uno, y en este artículo traigo una *review* sobre la mejor opción calidad-precio que conozco de primera mano: el **Redragon Kumara K552.**\n\n## Minimalista, sólido y TKL\n\nCreo que hay más elegancia en la mínima expresión de las cosas, y este teclado es especialmente cumplidor con este requisito. Viene en dos colores: blanco y negro sin más. No busca romper esquemas sino integrarse por completo en tu *setup.* Toda la estructura está hecha de plástico reforzado con acero, lo que le da peso, robustez y sensación de calidad. Además, es de tamaño compacto gracias a la ausencia del *pad* numérico (de ahí lo de TKL, *tenkeyless*), lo que otorga un mayor espacio sobre el escritorio para otros periféricos, como el *mouse*, y facilita su recolocación.\n\n## Una escritura rápida y precisa gracias a sus *switches* mecánicos\n\nAntaño se creía que tener teclados mecánicos era un capricho, pero el avance de la tecnología en materia de periféricos nos demostró que no solo son superiores a los teclados de membrana, sino que son mejor alternativa para los usuarios más intensos. Los *switches* mecánicos brindan un mejor *feedback* por cada tecla individual, son más duraderos y tienen un tiempo de respuesta más corto.\n\nEn consecuencia, programar en el Redragon Kumara K552 es un placer en todo sentido. Sus *switches* son ruidosos a propósito, por lo que funciona como ASMR para cualquier desarrollador, aparte de que registran la pulsación a la mitad de su recorrido. Además, si en algún caso alguno llegara a fallar, puedes reemplazarlo sin tener que desmontar el teclado entero, lo que es un plus importante a la hora de ahorrar tiempo en reparaciones.\n\n## Una retroiluminación más que correcta en la versión negra\n\nExisten dos modelos de este teclado: el RGB y el Rainbow. En el RGB, cada tecla es personalizable a través del software de Redragon, lo que da lugar a patrones de retroiluminación más personalizables. En el Rainbow, en cambio, cada fila de teclas es un color invariable, y solo podemos cambiar el comportamiento de las mismas a través de *presets* integrados que se controlan con combinaciones de teclas.\n\nEn el teclado blanco, la retroiluminación se refleja en la base, lo que reduce el contraste y la legibilidad de los *keycaps.* En la versión negra, sin embargo, este inconveniente desaparece por completo, convirtiéndose en una opción más cómoda especialmente para jornadas de trabajo nocturnas.\n\n## Excelente relación calidad-precio para los más exigentes\n\nLo mejor de este teclado es, sin duda, su relación costo-beneficio. El Redragon Kumara K552 es el ejemplo perfecto de cómo se pueden llegar a fabricar periféricos de excelente calidad a un precio más que asequible para el público. Ahora mismo, su precio ronda los cuarenta dólares americanos ($40), un precio más que correcto para quien desee probar un teclado cumplidor, robusto, duradero y especialmente placentero a la hora de escribir.\n\n## ¿Dónde comprar?\n\nPuedes comparlo en Amazon siguiendo este enlace: [Redragon Kumara K552](https://amzn.to/3J8xMyE)\n\n> Nota del autor: Este artículo contiene enlaces de afiliados, lo que significa que si compras algo después de hacer clic en ellos, puedo ganar una pequeña comisión sin costo adicional para ti.",
      "updatedAt": "2023-03-11T23:37:10.290Z"
    },
    {
      "id": "5173675b-ae73-4fcb-830e-89686edecee3",
      "title": "¿Qué es el this en JavaScript?",
      "slug": "this-en-javascript",
      "tags": ["Tutoriales", "Destacado"],
      "createdAt": "2023-03-04T17:45:35.035Z",
      "cover": {
        "id": 40672,
        "src": "https://a-us.storyblok.com/f/1005258/1920x1280/2faaa0a4f3/cover.jpg",
        "alt": "Código escrito en JavaScript",
        "width": 1920,
        "height": 1280
      },
      "ogImage": {
        "id": 40671,
        "src": "https://a-us.storyblok.com/f/1005258/1200x630/a72099daaf/og-image.jpg",
        "alt": "¿Qué es el this en JavaScript?",
        "width": 1200,
        "height": 630
      },
      "teaser": "Si has sufrido con la polivalencia del this en JavaScript, entonces este artículo es para ti.",
      "content": "¿Conoces algo más polivalente que el `this` en JavaScript? Personalmente, no creo que exista algo que se le parezca. Y es que el `this` ha sido objeto de un sinfín de confusiones entre los más novatos y experimentados de este lenguaje, pues su valor depende de cómo, cuándo y dónde lo evalúes; es como el elemento cuántico del lenguaje. Por eso, en este artículo, exploraremos de forma muy práctica qué es el `this` en JavaScript, cómo funciona y cuál es su valor en diferentes contextos.\n\n## ¿Qué es el `this`?\n\nEs una palabra reservada en JavaScript que podemos utilizar para referirnos al contexto en el que se invoca, por lo que su valor implícito puede variar durante la ejecución del código.\n\n## `this` en el contexto global\n\nDecimos que el contexto global es todo lo que se encuentra fuera de cualquier bloque de código.\n\nEn este caso, `this` siempre hace referencia al objeto global:\n\n```jsx\nconsole.log(this === window) // true\n\nthis.awesomeNumber = 37\nconsole.log(window.awesomeNumber) // 37\n```\n\n## `this` en el contexto de una función\n\nSi invocamos `this` dentro de una función, su valor cambia dependiendo de cómo ejecutamos la función.\n\n### Llamada simple\n\nSi es una llamada simple y no está en modo estricto, `this` devuelve el objeto global.\n\n```jsx\nfunction whoIsThis() {\n  return this\n}\n\nconsole.log(whoIsThis() === window) // true, porque window es un objeto global\n```\n\n### Llamada simple (modo estricto)\n\nSi es una llamada simple y está en modo estricto, `this` conserva el valor que haya recibido antes de la ejecución de la función, y devuelve `undefined` si no ha recibido ninguno.\n\n```jsx\nfunction whoIsThis() {\n  'use strict'\n  return this\n}\n\nconsole.log(whoIsThis()) // undefined\n```\n\n### Como método de objeto\n\nSi la función es el método de un objeto y se invoca como tal, `this` es el objeto en sí mismo.\n\n```jsx\nconst me = {\n  name: 'Carlos Reyes',\n  sayMyName() {\n    return this.name\n  },\n}\n\nconsole.log(me.sayMyName()) // 'Carlos Reyes'\n```\n\n### Función asignada como método de un objeto\n\nCuando se define una función y luego se asigna como método de un objeto, `this` dentro de la función se refiere al objeto al que se ha asignado la función.\n\n```jsx\nfunction sayHello() {\n  console.log(`Hola, soy ${this.name}.`)\n}\n\nconst person = {\n  name: 'Juan',\n  greet: sayHello, // asignamos 'sayHello' a la propiedad 'greet'\n}\n\nperson.greet() // Hola, soy Juan.\n```\n\n### Función asignada como método de un objeto anidado\n\nCuando se define una función y se asigna como propiedad de un objeto más anidado, `this` dentro de la función se refiere al objeto más inmediato que contiene la función como propiedad.\n\n```jsx\nconst myObj = {\n  myMethod: function () {\n    console.log(this)\n  },\n  nestedObj: {\n    nestedMethod: myObj.myMethod,\n  },\n}\n\nmyObj.myMethod() // Imprime el objeto myObj\nmyObj.nestedObj.nestedMethod() // Imprime el objeto nestedObj\n```\n\n### Como un _Getter_ o un _Setter_\n\nSi el método en cuestión es un _getter_ o un _setter_, `this` es el objeto al que pertenece.\n\n```jsx\nconst me = {\n  firstName: 'Carlos',\n  lastName: 'Reyes',\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`\n  },\n  set fullName(fullName) {\n    const [firstName, lastName] = fullName.split(' ')\n    this.firstName = firstName\n    this.lastName = lastName\n  },\n}\n\nconsole.log(me.fullName) // 'Carlos Reyes'\nme.fullName = 'Pedro Perez'\nconsole.log(me.fullName) // 'Pedro Perez'\n```\n\n### Como un constructor\n\nSi se llama la función como un constructor (esto es, hacer uso de la palabra `new`), `this` es el nuevo objeto que está siendo construido, a menos que la función retorne un objeto, en cuyo caso `this` será ese objeto retornado.\n\n```jsx\nfunction Person(name, age) {\n  this.name = name\n  this.age = age\n}\n\nconst me = new Person('Carlos', 22)\nconsole.log(me.name) // 'Carlos'\nconsole.log(me.age) // 22\n```\n\n```jsx\n// Si el constructor retorna un objeto, entonces\nfunction Person(name, age) {\n  this.name = name // esta línea se considera muerta\n  this.age = age // esta también\n  return { name: 'Juan', age: 30 }\n}\n\nconst person = new Person('Carlos', 22)\nconsole.log(person.name) // 'Juan'\nconsole.log(person.age) // 30\n```\n\n### Usando `.call()` y `.apply()`\n\nSi se llaman los métodos especiales `.call()` y `.apply()` de cualquier función con un objeto particular como primer argumento, entonces `this` será enlazado explícitamente a ese objeto durante su ejecución.\n\n```jsx\nconst person = {\n  name: 'Ana',\n  age: 25,\n  sayHello: function () {\n    console.log(`Hola, mi nombre es ${this.name} y tengo ${this.age} años.`)\n  },\n}\n\nconst person2 = {\n  name: 'Juan',\n  age: 30,\n}\n\nperson.sayHello() // Hola, mi nombre es Ana y tengo 25 años.\nperson.sayHello.call(person2) // Hola, mi nombre es Juan y tengo 30 años.\nperson.sayHello.apply(person2) // Hola, mi nombre es Juan y tengo 30 años.\n```\n\n### Usando `.bind()`\n\nSi se llama al método especial `.bind()` de cualquier función con un objeto como primer argumento, ese objeto será el nuevo y permanente `this` de la función que retorna este método especial. Es decir, `.bind()` crea una nueva función con el mismo alcance y cuerpo de su dueño, pero con un `this` diferente al original.\n\n```jsx\nconst person = {\n  name: 'Juan',\n  age: 30,\n  sayHi() {\n    console.log(`Hola, mi nombre es ${this.name} y tengo ${this.age} años.`)\n  },\n}\n\nconst newPerson = {\n  name: 'María',\n  age: 25,\n}\n\nconst newSayHi = person.sayHi.bind(newPerson)\n\nnewSayHi() // Hola, mi nombre es María y tengo 25 años.\n```\n\n### Como un _listener_ en el DOM\n\nPor último, cunado la función es utilizada como un _listener_ de un evento en el DOM, su `this` es el elemento del DOM al que apunta este evento.\n\n```jsx\nconst button = document.querySelector('#myButton')\n\nfunction changeContent(e) {\n  console.log(this === button) // true\n  this.textContent = '¡Clic realizado!'\n}\n\nbutton.addEventListener('click', changeContent)\n```\n\nAhora que ya conoces el multiverso de `this`, es hora de ponerlo en práctica construyendo tus propios ejemplos para cada escenario. ¡Más nunca lo olvidarás!\n\nComparte este artículo con tus colegas programadores para alegrarles el día.",
      "updatedAt": "2023-03-06T19:46:04.721Z"
    },
    {
      "id": "3d14d800-d59f-4a38-b6b2-423b750bd13f",
      "title": "¿Cómo empezar a programar? Te cuento mi experiencia",
      "slug": "como-empezar-a-programar",
      "tags": ["Consejos", "Destacado"],
      "createdAt": "2023-03-01T22:51:58.293Z",
      "cover": {
        "id": 39204,
        "src": "https://a-us.storyblok.com/f/1005258/1920x1280/791f8479e5/cover.jpg",
        "alt": "Un programador frente a sus monitores",
        "width": 1920,
        "height": 1280
      },
      "ogImage": {
        "id": 39205,
        "src": "https://a-us.storyblok.com/f/1005258/1200x630/ac147eb4da/og-image.jpg",
        "alt": "¿Cómo empezar a programar? Te cuento mi experiencia",
        "width": 1200,
        "height": 630
      },
      "teaser": "En este artículo, te contaré mi experiencia sobre cómo empecé a programar y compartiré algunos consejos para aquellos que quieren comenzar en esta industria.",
      "content": "*Yep*, no leíste mal. Sé que suena cliché hablar de este tema por enésima vez en un blog, pero créeme si te digo que esta vez es personal: te hablaré desde mi experiencia como profesional en el área de la programación desde hace tres años. Mi intención es ayudarte a esclarecer cualquier duda que tengas sobre cómo empezar a programar, a través de mi carrera y mis vivencias como programador en este lapso de tiempo que ha marcado mi vida y, cómo no, resumirlo en cuatro pasos clave para que puedas seguirlos con facilidad. ¡Comencemos!\n\n## Consigue una computadora\n\nRecuerdo que cuando mi curiosidad por la programación se despertó, todo lo que tenía a mi alcance era un par de cuadernos y mi teléfono, pues había vendido mi laptop unos cuantos meses atrás. Por ende, solía utilizar la computadora de mi pareja para practicar lo poco que aprendía a través del móvil.\n\nEl siguiente objetivo era claro: debía prepararme y trabajar lo suficiente como para recuperar una nueva laptop personal que me permitiese continuar. Sabía que con el teléfono no podía hacer más que mirar tutoriales y leer documentaciones; era consciente de que, para poder empezar a programar, lo mejor era tener una computadora propia que me permitiera escribir código por horas. Por esa razón no escatimé en mi primera adquisición, y compré un portátil que se ajustó a mi presupuesto y necesidades.\n\n¿El resultado? Estoy escribiendo este párrafo hoy por hoy gracias a esa decisión, entre otros factores. Si no hubiese contado con la laptop de mi pareja y su apoyo, no hubiese podido empezar. Si no hubiese considerado la idea de invertir en mi herramienta de trabajo futuro, no hubiese podido continuar.\n\n![Una laptop otorgada por el gobierno venezolano con adaptaciones y una ventana de código abierta.](https://a-us.storyblok.com/f/1005258/1280x960/e576310c3e/canaima-nike.png \"Si tiene pantalla y un teclado, puedes empezar a escribir código.\")\n\nAhora te animo a hacer lo mismo: **consigue un computador con un teclado y pantalla en buenas condiciones, no importa qué tan obsoleto o lento esté**, si es prestada o si es tuya. Luego, dedícale tiempo a convertirla en tu herramienta principal, hazla parte de tu proceso de desarrollo y más temprano que tarde estarás desarrollando tus propios proyectos.\n\n## Explora las ramas de la programación\n\nCuando empecé mi camino, tuve que sentarme a entender qué es realmente programar, por qué parecía tan difícil y en qué campos aplicaba. Y es que normalmente nos referimos a la idea de programar como una actividad mecánica -la de escribir código-, pero poco se habla en los espacios públicos de las numerosas posibilidades que trae consigo.\n\nSucede que programar es resolver problemas utilizando algoritmos, y esos problemas pueden provenir de casi cualquier otra industria que esté, o no, relacionada con el desarrollo del *software* y la tecnología. Esto ramifica nuestra industria en áreas de interés que, a su vez, están compuestas de especialidades para cada tipo de problema a resolver.\n\nHoy en día, podemos resumir las ramas de la programación como sigue:\n\n- Desarrollo web y desarrollo móvil\n  - Frontend\n  - Backend\n- Desarrollo de sistemas embebidos\n- Sistemas operativos\n- Seguridad informática\n- Inteligencia Artificial\n- Realidad Aumentada\n- Ciencias de datos\n\nTómate el tiempo de investigar con detenimiento cada una de estas ramas, sus aplicaciones, su complejidad, sus especialidades, su rentabilidad, y escoge la que más te guste. El mundo de la programación está lleno de conocimiento y novedades, por lo que nunca te faltarán fuentes de información para descubrir lo que te apasiona.\n\n## Construye o encuentra una ruta de aprendizaje\n\nAhora que ya conoces las ramas más generales de la programación, es momento de investigar qué tecnologías, conceptos y fundamentos están relacionados con esa especialidad que llamó tu atención. Haces una búsqueda rápida y ¡pum! te encuentras con un montón de información dispersa. ¿Qué puedes hacer al respecto?\n\nYo empecé a programar porque quería adaptar un juego de cartas regional a su versión digital. Descubrí que Python era un lenguaje de programación con una curva de aprendizaje muy amigable… y luego me percaté de que quizás no estaba estudiando lo que necesitaba para lograr mi objetivo. Entonces conocí el desarrollo web: amor a primera vista. Tenía todo lo que quería para continuar, pero debía aprender nuevos lenguajes, nuevas técnicas y otros fundamentos radicalmente distintos a los que ya conocía. Tuve que cambiar de rumbo a mitad de camino.\n\nTener una curva de aprendizaje inestable es parte natural de cualquier proceso autodidacta. Pasé por ahí, pero pude haberlo mitigado si desde el principio hubiese seguido una guía, una carrera con niveles por alcanzar. Mi siguiente consejo es, por tanto, que encuentres una ruta de aprendizaje cómoda y alineada con tus objetivos, y si no encuentras ninguna, puedes optar por construirla, agregando todos tus intereses y organizándolos por prioridad.\n\nLas fuentes que utilices para cada tramo de tu ruta dependerán de tu método de aprendizaje favorito. Hay muchísimos cursos, documentaciones y tutoriales tanto gratuitos como pagos que puedes utilizar a favor durante el proceso. Pero eso sí, ¡nunca omitas los fundamentos!\n\nComo recomendación personal, puedes visitar [roadmap.sh](https://roadmap.sh), una página que contiene rutas de aprendizaje recomendadas para algunas de las ramas de programación que mencioné anteriormente. ¡Echa un vistazo!\n\n## Crea proyectos\n\nNo importa qué tan talentoso puedas llegar a ser, *la práctica hace al maestro*. Poner en práctica tus conocimientos te ayudará a reforzarlos y a encontrar mejores formas de implementarlos y, para un programador, la mejor forma de practicar es a través del desarrollo de proyectos completos.\n\nMi primer proyecto, al igual que el de muchos, fue construir un sitio web personal en el que pudiera hablar un poco sobre mí. Cuando estudié HTML, hice la estructura de contenido de la página principal. Luego, mientras tomaba las clases del curso de CSS, comencé a pintar y definir la identidad visual del proyecto entero y después, cuando aprendí JavaScript, no tuve reparo en agregar botones que desplegaban menús interactivos.\n\nPruébalo tú mismo: **por cada cosa nueva que aprendas, ponlo en práctica de inmediato a través de un proyecto** ideado por ti. Tampoco tiene por qué ser complejo ni millonario; solo basta con aplicar tu conocimiento en una funcionalidad que lo requiera y la satisfacción de hacer que funcione no tardará en llegar.\n\n¿Te animas a empezar a programar ahora que ya tienes más contexto? Házmelo saber en los comentarios más abajo.",
      "updatedAt": "2023-03-06T20:15:55.528Z"
    },
    {
      "id": "496a16d0-883c-4b29-9df8-676a4a01a1bb",
      "title": "¿Son las contribuciones en GitHub una forma de medir el seniority?",
      "slug": "contribuciones-github-seniority",
      "tags": ["Opiniones"],
      "createdAt": "2023-02-27T00:34:12.555Z",
      "cover": {
        "id": 36042,
        "src": "https://a-us.storyblok.com/f/1005258/1920x2880/e5346eaee1/cover.jpg",
        "alt": "GitHub",
        "width": 1920,
        "height": 2880
      },
      "ogImage": {
        "id": 36041,
        "src": "https://a-us.storyblok.com/f/1005258/1200x630/937182828c/og-image.jpg",
        "alt": "¿Son las contribuciones en GitHub una forma de medir el seniority?",
        "width": 1200,
        "height": 630
      },
      "teaser": "Cuantos más cuadraditos verdes en GitHub, más seniors... ¿o no?",
      "content": "Estuve tantos días enfocado en el desarrollo de este proyecto, que no presté demasiada atención a lo que ocurría en *Tech* Twitter, mi nido favorito de debates sobre programación. Hoy, me encuentro con una opinión bastante polémica que se difundió rápidamente entre los más activos dentro del mundo del desarrollo. Un usuario comentó -no sé si de forma irónica o en serio- que los desarrolladores no deberían aplicar a puestos *senior* si sus contribuciones de GitHub lucían como en la siguiente imagen:\n\n![Una contribución en el año pasado](https://a-us.storyblok.com/f/1005258/834x225/daa9ac6581/contribution-1.png)\n\n¿Qué hay de cierto en este comentario? Empecemos por el principio.\n\n## ¿Qué son las contribuciones en GitHub?\n\nUna contribución en GitHub es equivalente a cualquier edición de código que haya sido confirmada a través de un *commit* en Git. Se toman en cuenta los cambios realizados en repositorios propios y de terceros en las que se es colaborador.\n\nGitHub recopila todas esas confirmaciones y las muestra en un lindo tablero de píxeles anual con un código de tonalidades en verde similar a un mapa de calor: cuanto más verde esté un cuadradito, más contribuciones se hicieron ese día.\n\n## ¿Cuál es su utilidad?\n\nSu utilidad principal es permitirle al desarrollador visualizar de forma muy general y rápida su rendimiento a lo largo del año en cuestión. También es útil para mostrar todas las contribuciones que se hayan realizado en un día y repositorio concreto.\n\n## ¿Tiene sentido como métrica para evaluar el *seniority?*\n\nNo. La principal razón es que medir el *seniority* usando la cantidad de contribuciones anuales omite la calidad de estas. En ese caso, valdría más la pena encontrar repositorios públicos en los que se pueda evaluar objetivamente la calidad del *software* que produce, que mirar cuántos commits hizo en un periodo de tiempo concreto.\n\nPor otra parte, no todas las empresas están interesadas en la cantidad de *commits* que un desarrollador puede hacer en un año. La naturaleza del trabajo de un profesional *senior* es mucho más compleja que romper récords en contribuciones: es saber diseñar soluciones de arquitectura escalables para problemas de lógica de negocio cada vez más difíciles.\n\nTambién hay que considerar que GitHub no es la única forja de repositorios que implementa esa funcionalidad, y que no todas las empresas y desarrolladores usan el mismo *software* de alojamiento de proyectos, lo que conduce a tener cantidades de contribuciones muy diferentes en distintas plataformas.\n\n## En conclusión…\n\nPodemos establecer que las contribuciones en GitHub no son una métrica fiable para medir las destrezas de un programador, sino más bien un recuento de su tiempo escribiendo código. Debemos tener en cuenta que hay muchos factores que influyen en la calidad y habilidades de un desarrollador *senior*, como su experiencia, habilidades técnicas, capacidad de trabajar en equipo y su facilidad para resolver problemas complejos.\n\nIgualmente los invito a inferir mi *seniority* como programador utilizando mi mapa de contribuciones en la caja de comentarios:\n\n![Mis contribuciones](https://a-us.storyblok.com/f/1005258/916x223/e50e81c39c/my-contributions.png \"Mis contribuciones\")",
      "updatedAt": "2023-02-27T01:05:06.776Z"
    },
    {
      "id": "121a67fe-1497-4404-a272-ae6759b4cf3b",
      "title": "¿Por qué \"La Esquina del Código?\"",
      "slug": "por-que-la-esquina-del-codigo",
      "tags": ["Destacado"],
      "createdAt": "2023-02-25T19:53:48.808Z",
      "cover": {
        "id": 35845,
        "src": "https://a-us.storyblok.com/f/1005258/1920x2400/6fba045d7d/cover.jpg",
        "alt": "Idea",
        "width": 1920,
        "height": 2400
      },
      "ogImage": {
        "id": 35739,
        "src": "https://a-us.storyblok.com/f/1005258/1200x630/fbf229a88f/og-image.jpg",
        "alt": "Imagen destacada del artículo para redes sociales",
        "width": 1200,
        "height": 630
      },
      "teaser": "Hasta hace unas cuantas horas, este blog era parte del concepto principal de mi marca. Ahora tiene identidad propia, y en este artículo te cuento el porqué.",
      "content": "Hasta hace unas cuantas horas, este blog era parte del concepto principal de mi marca, un subdominio dedicado a la divulgación de contenido sobre programación, que estaba publicado en [blog.carlosreyesweb.com](https://blog.carlosreyesweb.com). Ahora, *La Esquina del Código* tiene identidad propia; es el engendro de un *brainstorming* intenso durante las horas más altas de la noche. Es el resultado de entender cómo funciona, entre otras cosas, la optimización para motores de búsqueda (SEO), y también es un manifiesto de intenciones; estoy explorando esa parte de mí que gusta de crear productos con contenido de calidad.\n\n## ¿De dónde viene el nombre?\n\nPodría engañarte a ti, lector, escribiendo el párrafo más inspirador y romántico que haya escrito en toda mi vida. Podría decirte que *La Esquina del Código* es un nombre pensado para encabezar los cientos de artículos sobre los temas más recónditos y secretos de la programación y el sector IT que escribiré a lo largo de este camino. Podría reírme de ti aunque no te conozca… pero no lo haré. Prefiero decirte, con descaro, que escogí este nombre entre tantas ideas aportadas por *ChatGPT*.\n\nNo dije mentiras al establecer, en el último punto de mi artículo sobre [cinco trucos para ser más productivo programando](https://esquinadelcodigo.com/consejos-productividad-programador), que las inteligencias artificiales actuales son una poderosa herramienta para acelerar los procesos creativos y que, por ende, podemos utilizarlas a favor sin caer en tabúes. De hecho, cuando dije que este blog es el resultado de un *brainstorming* extenso, solo omití esclarecer que no fue en solitario, y no me avergüenza en absoluto.\n\n## ¿Y la identidad visual?\n\nHabrás notado que preservé la estructura y distribución de los elementos en pantalla, que son elementos clave de la identidad de este proyecto. Sin embargo, cambié la paleta de colores y las fuentes por dos motivos:\n\n1. Quería separar a *La Esquina del Código* de mi marca. Este blog contiene, a partes iguales, el conocimiento y experiencia de Carlos Reyes, *el programador*, y de Carlos Reyes, *el escritor*. Hacerlo parte del dominio visual del desarrollador solamente no conectaba con lo que yo sentía al respecto de este proyecto.\n2. Quería simplificar los elementos que componen al diseño del sitio para hacerlo aún más minimalista. Como diseñador web, siempre he sido fanático de la idea de que podemos crear interfaces de usuario atractivas con muy pocos elementos, y procuro reflejar esa tendencia en cada proyecto que me propongo.\n\n![Identidad visual anterior](https://a-us.storyblok.com/f/1005258/1919x926/6d845f0dd3/before.png \"Identidad visual anterior\")![Nueva identidad visual](https://a-us.storyblok.com/f/1005258/1919x928/846757fb03/after.png \"Nueva identidad visual\")\n\n## ¿Cambiará en algo el contenido?\n\nLa respuesta corta es que no.\n\nDesde la base, este blog fue concebido con la idea de divulgar contenido sobre programación y tecnología a través de dos tipos de artículos principales: tutoriales y consejos. Luego, existen otros dos tipos que representan puertas de entrada a mi perspectiva como desarrollador y entusiasta del *hardware*: opiniones y *reviews*.\n\nTodo lo que ha cambiado forma parte de la piel del sitio web y su identidad, pero la columna vertebral es la misma.\n\n## Bienvenido a este viaje.\n\nSin más que acotar, espero que tú, lector, puedas disfrutar de este trayecto como espectador hacia la construcción de un blog importante en el mundo de la tecnología, tanto como yo estoy disfrutando el desarrollo de este proyecto y su nutrición de contenido.\n\nSalud.",
      "updatedAt": "2023-02-25T22:50:01.980Z"
    },
    {
      "id": "930d053e-70f0-468d-9802-0d28d80a4a42",
      "title": "5 consejos para ser más productivo como programador",
      "slug": "consejos-productividad-programador",
      "tags": ["Consejos"],
      "createdAt": "2023-02-22T07:18:14.277Z",
      "cover": {
        "id": 33066,
        "src": "https://a-us.storyblok.com/f/1005258/1920x1280/94c3d3ace7/cover.jpg",
        "alt": "Programadores trabajando",
        "width": 1920,
        "height": 1280
      },
      "ogImage": {
        "id": 35577,
        "src": "https://a-us.storyblok.com/f/1005258/1200x630/7b01f9cff7/og-image.jpg",
        "alt": "Consejos para ser más productivo como programador",
        "width": 1200,
        "height": 630
      },
      "teaser": "En este artículo te compartiré cinco consejos que considero útiles para simplificar nuestras tareas como desarrolladores.",
      "content": "Para un programador, es esencial hacer uso eficiente del tiempo que tiene asignado para sus proyectos, sean laborales o personales. Cualquier tip o herramienta que le permita acelerar las tareas más repetitivas será, por tanto, un instrumento de valor para solucionar sus problemas y ser más productivo. Por eso, en este artículo te compartiré cinco consejos que considero útiles para simplificar nuestras tareas como desarrolladores.\n\n## Utiliza atajos de teclado en el editor de código\n\nDejemos algo en claro: **el periférico favorito de cualquier programador es el teclado.** Utilizarlo al máximo te permitirá hacer del desarrollo un proceso más dinámico y práctico. Aprender los atajos de teclado más comunes, en especial los relacionados con el editor de código, te facilitarán operaciones como la manipulación de los archivos, la adición de comentarios, el uso de macros que inserten *snippets* y demás.\n\nTe dejaré por aquí una referencia rápida con los **atajos de teclado que más utilizo en Visual Studio Code**, el editor de código más utilizado en la actualidad. Estos atajos **funcionan en Windows**, y **pueden variar ligeramente dependiendo del sistema operativo:**\n\n~~~txt\nControl + K Control + O                 ## Abre una carpeta.\nControl + K F                           ## Cierra la carpeta o espacio de trabajo en cuestión.\nControl + Shift + N                     ## Abre una nueva ventana del editor.\nControl + /                             ## Comenta la línea seleccionada.\nShift + Alt + F                         ## Formatea el código.\nAlt + Flecha arriba/abajo               ## Mueve la línea actual hacia arriba o hacia abajo\nShift + Alt + Flecha arriba/abajo       ## Copia la línea actual y la coloca por encima o por debajo.\nControl + ` (backtick)                  ## Muestra/oculta la terminal integrada. Hace foco en ella.\nControl + B                             ## Muestra/oculta el panel lateral izquierda. Útil para despejar la vista del código. \nControl + Shift + P                     ## Abre la paleta de comandos del editor.\nControl + K Control + S                 ## Abre la lista de atajos de teclado.\nControl + , (coma)                      ## Abre la configuración del editor.\nControl + F                             ## Busca en el archivo actual.\nControl + Shift + F                     ## Busca en todos los archivos del proyecto\nControl + P                             ## Muestra el buscador de archivos.\n~~~\n\n## Crea snippets de código personalizados\n\nCrear un archivo nuevo con el código mínimo necesario para hacer una funcionalidad, puede llegar a ser repetitivo en ocasiones y, aunque algunos *frameworks* tienen líneas de comandos para automatizar esta tarea, otras herramientas dependen enteramente de que tú definas la estructura de archivos y carpetas. Por ende, antes que escribir cada archivo desde cero, **lo mejor es crear plantillas de código (llamados *snippets*)** que se insertan automáticamente al teclear una secuencia de caracteres concreta.\n\n![Inserción de un componente de React a través de un snippet en Visual Studio Code](https://a-us.storyblok.com/f/1005258/989x319/594d91ada4/snippet-example-1.png \"Snippet de componente React en Visual Studio Code\")\n\n![Ejemplo de componente de React insertado con un snippet en Visual Studio Code](https://a-us.storyblok.com/f/1005258/509x159/1529a444d1/snippet-example-2.png \"Componente de React insertado con snippet en Visual Studio Code.\")\n\nEn Visual Studio Code, por ejemplo, también existen extensiones en el *marketplace* que agregan a tu editor plantillas comunes para casi cualquier cosa. Y si ninguna te acaba de convencer del todo, o no tiene lo que necesitas, siempre puedes crear tus propios *snippets* a través de la paleta de comandos. ¡Haz la prueba!\n\n## Utiliza los escritorios virtuales de tu sistema operativo\n\nTener dos pantallas te hace más *senior* que cualquier otro mortal con una sola pantalla, pero es que si además utilizas diferentes escritorios virtuales para separar contextos, ¡más temprano que tarde te convertirás en líder de tu equipo!\n\nSeparar tus múltiples ventanas en contextos diferentes te permite llevar tu multitarea a otro nivel. **Puedes tener un escritorio en el que las únicas ventanas sean el editor de código y una instancia del navegador con la documentación adecuada**, por ejemplo, **mientras que en otro escritorio puedes tener aquellos programas y herramientas que complementan tu zona de trabajo**, como el software de gestión de proyectos, la sala de chat de tu trabajo o el álbum más reciente de tu artista favorito en Spotify. **Esto te permite tener menos ventanas abiertas en una misma barra de tareas**, lo que te facilita cambiar de ventanas rápidamente y evitar perder el foco en tus tareas.\n\nPuedes usar esa funcionalidad en Windows pulsando las teclas **Windows + Tabulador.** Esto te mostrará las ventanas y escritorios en uso. Prueba agregando unos cuantos, y después, cambia rápidamente entre estos usando la combinación de teclas **Control + Windows + Flecha izquierda/derecha.**\n\n![Tres escritorios virtuales de Windows](https://a-us.storyblok.com/f/1005258/1920x1080/22e335c253/virtual-desktops-example.png \"Escritorios virtuales de Windows\")\n\nTambién puedes hacer los cambios de escritorio utilizando el ratón, pero, ¿en qué quedamos con los atajos del teclado?\n\n## Divide el trabajo en tareas más pequeñas.\n\nComo no podemos comernos a la ballena de un solo bocado, nuestra mejor estrategia es ir un mordisco a la vez. Este mismo principio aplica para muchos aspectos en la vida y, en nuestro caso particular, nos viene como anillo al dedo, porque nos ayuda a trazar hojas de ruta, fechas de entrega y objetivos realistas. Dividir tu trabajo en tareas más pequeñas te ayudará a establecer prioridades y mantener el foco en aquello que debes implementar.\n\nPara lograrlo, puedes utilizar un software de gestión de proyectos, que te proporcionan interfaces de usuario intuitivas y que te dan un vistazo más general de lo que debes hacer, o bien, puedes hacerlo de forma analógica a través de anotaciones, diagramas en papel o cualquier otra técnica de organización que conozcas.\n\n## Aprovecha las nuevas inteligencias artificiales a tu favor\n\nPor último, para nadie es un secreto que las inteligencias artificiales actuales *saben escribir código*. De hecho, más que tomarlo como un tabú, debemos aprovecharlo como una ventaja para llevar nuestras ideas a la implementación de forma más rápida. Puedes pedirle a un *chatbot,* como ChatGPT, que genere un arreglo de datos falsos para hacer *mock* de tu API, contrastar tus ideas con las suyas, pedirle ayuda con un problema, o que te explique en términos simples el funcionamiento de un algoritmo concreto. Con esto puedes reducir notoriamente el coste de tiempo que requiere implementar funcionalidades triviales, o bien, solucionar rápidamente ese bug que llevas intentando corregir tres horas.\n\nPor ejemplo:\n\n> Para el siguiente título y descripción, dame una página de Next.js que contenga todas las metaetiquetas necesarias en JSX. Incluye las de OpenGraph y Twitter. Extrae los valores del atributo \"content\" repetidos en constantes:\n>\n> Título: 5 tips para mejorar tu productividad como programador\n> Descripción: En este artículo te compartiré cinco tips que considero útiles para simplificar nuestras tareas como desarrolladores.\n\nEsta es la respuesta de ChatGPT:\n\n~~~jsx\nimport Head from 'next/head';\n\nconst TITLE = '5 tips para mejorar tu productividad como programador';\nconst DESCRIPTION = 'En este artículo te compartiré cinco tips que considero útiles para simplificar nuestras tareas como desarrolladores.';\nconst IMAGE_URL = 'https://example.com/image.jpg';\n\nconst OG_TITLE = TITLE;\nconst OG_DESCRIPTION = DESCRIPTION;\nconst OG_TYPE = 'article';\nconst OG_IMAGE = IMAGE_URL;\nconst OG_URL = 'https://example.com/article';\n\nconst TWITTER_TITLE = TITLE;\nconst TWITTER_DESCRIPTION = DESCRIPTION;\nconst TWITTER_IMAGE = IMAGE_URL;\nconst TWITTER_CARD = 'summary_large_image';\n\nconst PAGE = () => (\n  <>\n    <Head>\n      <title>{TITLE}</title>\n      <meta name=\"description\" content={DESCRIPTION} />\n      \n      {/* OpenGraph meta tags */}\n      <meta property=\"og:title\" content={OG_TITLE} />\n      <meta property=\"og:description\" content={OG_DESCRIPTION} />\n      <meta property=\"og:type\" content={OG_TYPE} />\n      <meta property=\"og:image\" content={OG_IMAGE} />\n      <meta property=\"og:url\" content={OG_URL} />\n      \n      {/* Twitter meta tags */}\n      <meta name=\"twitter:title\" content={TWITTER_TITLE} />\n      <meta name=\"twitter:description\" content={TWITTER_DESCRIPTION} />\n      <meta name=\"twitter:image\" content={TWITTER_IMAGE} />\n      <meta name=\"twitter:card\" content={TWITTER_CARD} />\n    </Head>\n    {/* Rest of the page content */}\n  </>\n);\n\nexport default PAGE;\n~~~\n\nImpresionante, ¿no?\n\nSin embargo, no todo es color de rosas aquí. Es importante considerar que, aunque parezca imposible, estos ***chatbots*** pueden arrojar resultados incorrectos, descontextualizados o, peor aún, alucinados. Por lo tanto, te sugiero verificar cualquier salida generada por una inteligencia artificial para evitar introducir problemas nuevos a tu proyecto.\n\nSiéntete libre de aplicar cualquiera de estos consejos en tu flujo de trabajo y dale un giro de dinamismo y frescura a tus días de trabajo. Programar no tiene por qué ser monótono.",
      "updatedAt": "2023-03-04T20:39:18.787Z"
    },
    {
      "id": "829a7678-545f-4d34-93c4-02d849766e3c",
      "title": "Consideraciones éticas sobre la Inteligencia Artificial",
      "slug": "consideraciones-eticas-ia",
      "tags": ["Opiniones", "Destacado"],
      "createdAt": "2023-02-17T01:57:07.377Z",
      "cover": {
        "id": 32485,
        "src": "https://a-us.storyblok.com/f/1005258/1920x2400/452ec04520/cover.jpg",
        "alt": "Un androide en una banca con una tablet",
        "width": 1920,
        "height": 2400
      },
      "ogImage": {
        "id": 35578,
        "src": "https://a-us.storyblok.com/f/1005258/1200x630/437c0f103a/og-image.jpg",
        "alt": "Consideraciones éticas sobre la Inteligencia Artificial",
        "width": 1200,
        "height": 630
      },
      "teaser": "¿Estamos preparados para los impactos éticos de la Inteligencia Artificial?",
      "content": "*Chatbots* que escriben como humanos, *oráculos* financieros capaces de predecir movimientos de mercado, generadores de imágenes a partir de texto y asistentes virtuales que nos emulan casi a la perfección, son solo algunos ejemplos de la omnipresencia de la Inteligencia Artificial en los últimos años. Sin embargo, a medida que la IA se vuelve más ubicua en nuestra sociedad, también es importante considerar los impactos éticos del uso y abuso de estos algoritmos. Los desarrollos en IA pueden tener implicaciones significativas para los derechos humanos, la privacidad y la justicia social. En este artículo, exploraremos los impactos éticos resultantes del uso y abuso de algoritmos avanzados en al menos cuatro puntos clave que definiremos a continuación.\n\n## El sesgo algorítmico\n\nDecimos que un algoritmo está sesgado cuando notamos en él una tendencia a producir resultados que están alineados con los valores de sus creadores y entrenadores, sin importar si estos son discriminatorios o no. Aunque es utópico considerar que toda creación humana debe ser cien por ciento objetiva, está claro que la falta de regulación sobre la creación de inteligencias artificiales puede dar lugar al nacimiento de software capaz de difundir ideologías consideradas extremistas o perjudiciales hoy en día. Por ello, conviene llevar a debate marcos regulatorios que intervengan en estos desarrollos, siempre y cuando estas no perjudiquen las investigaciones.\n\n## La privacidad y seguridad de datos\n\nCuando una Inteligencia Artificial con propósito específico es creada, debe ser entrenada utilizando grandes cantidades de datos previamente preparados y etiquetados. En un panorama ideal, toda la información utilizada para estos entrenamientos debe ser pública y no puede violar acuerdos de privacidad tanto internacionales como regionales. En la práctica, es complicado establecer el origen de los datos con los que un algoritmo fue entrenado, lo que da lugar a preocupaciones éticas sobre la manipulación de la información y la violación de licencias de uso. Para este caso, conviene establecer estándares globales y locales que exijan a los programadores y empresas transparencia y trazabilidad sobre la información que se utilice para fines de desarrollo.\n\nTambién es importante proteger, a través de esos estándares, la privacidad de los datos de quienes hacen uso de estas inteligencias artificiales, especialmente cuando las entradas proporcionadas por los usuarios se utilizan para entrenamientos posteriores, como es el caso de los *chatbots*.\n\n## Transparencia y explicabilidad\n\nEs un aspecto importante poder comprender cómo las inteligencias artificiales toman las decisiones y las justifican a través de ellas mismas o de sus creadores, pues permitirá a quienes hagan uso de ellas poder confiar en que sus resultados no son discriminatorios, antiéticos o perjudiciales. Esto es especialmente crucial en sectores en los que estos algoritmos están cada vez más presentes, como el financiero o la salud.\n\n## Responsabilidad y rendición de cuentas.\n\nPor último, resulta pertinente destacar que, aunque nos estamos aproximando cada vez más a la independencia relativa de las inteligencias artificiales, siguen siendo productos creados por un equipo de desarrolladores y empresas que, en última instancia, deben responsabilizarse y rendir cuentas por los resultados y consecuencias que puedan derivarse del uso de sus algoritmos.\n\nEl desarrollo tecnológico avanza a pasos agigantados, dejando en el camino debates y consideraciones sobre las últimas tecnologías que permitan regular el surgimiento y utilización de estas. En el caso de la Inteligencia Artificial, urge llevar a cabo estas discusiones a las diferentes mesas de trabajo para proteger los derechos y la integridad ética de las sociedades, pues está claro que un uso malintencionado de estas herramientas puede dar lugar a violaciones legales y morales importantes.",
      "updatedAt": "2023-03-06T20:15:41.902Z"
    }
  ]
}
